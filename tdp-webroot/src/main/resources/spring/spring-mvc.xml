<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
					    http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.0.xsd
					    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd">

	<!-- websocket消息推送 -->
	<websocket:handlers>
		<!-- 配置消息处理bean和路径的映射关系 -->
		<websocket:mapping path="/vdpWebSocketServer" handler="vdpWebSocketHandler"/>
		<!-- 配置握手拦截器 -->
		<websocket:handshake-interceptors>
			<bean class="cn.goldencis.tdp.core.websocket.WebSocketHandshakeInterceptor"/>
		</websocket:handshake-interceptors>
		<!-- 开启sockjs，去掉则关闭sockjs -->
		<!--<websocket:sockjs/>-->
	</websocket:handlers>
	<websocket:handlers>
		<websocket:mapping path="/sockjs/vdpWebSocketServer" handler="vdpWebSocketHandler"/>
		<websocket:handshake-interceptors>
			<bean class="cn.goldencis.tdp.core.websocket.WebSocketHandshakeInterceptor"/>
		</websocket:handshake-interceptors>
		<!-- 开启sockjs，去掉则关闭sockjs -->
		<websocket:sockjs/>
	</websocket:handlers>
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="stringHttpMessageConverter" />
				<ref bean="byteArrayHttpMessageConverter" />
				<!-- <ref bean="jsonHttpMessageConverter" /> -->
				<ref bean="jsonHttpMessageConverter4JS" />
			</list>
		</property>
	</bean>
	<bean id="byteArrayHttpMessageConverter"
		class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />

	<bean id="stringHttpMessageConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<bean id="jsonHttpMessageConverter4JS"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="objectMapper">
			<bean class="com.fasterxml.jackson.databind.ObjectMapper">
				<property name="dateFormat">
					<bean class="java.text.SimpleDateFormat">
						<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
					</bean>
				</property>
				<!--对属性值为null的不序列化反序列化 -->
				<property name="serializationInclusion">
					<util:constant
						static-field="com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL" />
				</property>
			</bean>
		</property>
		<property name="supportedMediaTypes">
			<list>
				<value>application/json</value>
				<value>text/json</value>
			</list>
		</property>
	</bean>

	<!-- 启动注解扫描 -->
	<mvc:annotation-driven />
    <!-- 启动AspectJ支持 -->
    <aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- springMVC只扫描controller -->
	<context:component-scan
		base-package="cn.goldencis.tdp.*"
		use-default-filters="false"><!-- base-package 如果多个，用“,”分隔 -->
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- <mvc:default-servlet-handler/> -->
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<!-- JSON转换器 -->
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!--<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>messages</value>
			</list>
		</property>
		<aop:scoped-proxy proxy-target-class="false" /> &lt;!&ndash; Needed for session serialization &ndash;&gt;
	</bean>-->

    <!--<bean class="cn.goldencis.tsa.opt.process.listener.RedisMQListener"/>-->

</beans>